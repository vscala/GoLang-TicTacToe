/*
	TicTacToe GoLang Project
	
*/
package main

import (
	"fmt"
	"math/rand"
)

// Constants
const XTOKEN string = "X"
const OTOKEN string = "O"
var PLACEMENTBOARD = [5][5]string {{"1", "|", "2", "|", "3"}, {"-", "+", "-", "+", "-"}, {"4", "|", "5", "|", "6"}, {"-", "+", "-", "+", "-"}, {"7", "|", "8", "|", "9"}};

// Game variables
var running bool = true
var turn bool = true
var aiTurn bool = false
var moveCount int = 0
var board = [5][5]string {{" ", "|", " ", "|", " "}, {"-", "+", "-", "+", "-"}, {" ", "|", " ", "|", " "}, {"-", "+", "-", "+", "-"}, {" ", "|", " ", "|", " "}};

// Print current board state
func printBoard() {
	for i := 0; i < 5; i++ {
		for j := 0; j < 5; j++ {
			fmt.Print(board[i][j])
		}
		fmt.Println()
	}
}

// Prints board to show placement options
func printPlacementBoard() {				   
	for i := 0; i < 5; i++ {
		for j := 0; j < 5; j++ {
			fmt.Print(PLACEMENTBOARD[i][j])
		}
		fmt.Println()
	}
	fmt.Println("These numbers represent places you can place your piece")
	fmt.Println()
}

// Returns a list of valid moves
func getValidMoves() [][]int {
	out := make([][]int, 9)
	return out
}

// Returns a move generated by the computer
func getAIMove() (row int, column int) {
	rng := rand.Intn(10-1)+1
	
	switch rng {
		case 1:
			row = 0; column = 0
		case 2:
			row = 0; column = 2
		case 3:
			row = 0; column = 4
		case 4:
			row = 2; column = 0
		case 5:
			row = 2; column = 2
		case 6:
			row = 2; column = 4
		case 7:
			row = 4; column = 0
		case 8:
			row = 4; column = 2
		case 9:
			row = 4; column = 4
	}
	return row, column
	return 0, 0
}

// Read user input from command line
func getMove() (row int, column int) {
	// get user placement
	var selection int
	fmt.Println("Enter a number (1-9) to place your piece")
	printBoard()
	fmt.Scanln(&selection)
	switch selection {
	case 1:
		row = 0; column = 0
	case 2:
		row = 0; column = 2
	case 3:
		row = 0; column = 4
	case 4:
		row = 2; column = 0
	case 5:
		row = 2; column = 2
	case 6:
		row = 2; column = 4
	case 7:
		row = 4; column = 0
	case 8:
		row = 4; column = 2
	case 9:
		row = 4; column = 4
	}
	return row, column
}

// Play move on board, and increment moveCount
func playMove(i int, j int) {
	if turn {
		board[i][j] = XTOKEN
	} else {
		board[i][j] = OTOKEN
	}
	moveCount++
}

// Determine if current board state is won
func checkWin() bool {

	return false
}

// Determine if current board state is drawn
func checkDraw() bool {
	return moveCount == 9
}

/*
	Runner:
		print placement board
		Each turn:
		1a. get move from user input
		1b. generate AI move
		2. play move on board
		3. print new board
		4. determine if game is won
		5. determine if game is drawn
		6. swap turn
	
*/
func runner() {
	var i int
	var j int
	printPlacementBoard()
	for running {
		if turn == aiTurn {
			i, j = getAIMove()
		} else {
			i, j = getMove()
		}
		playMove(i, j)
		printBoard()
		if checkWin() {
			running = false
			fmt.Println("Game won")
		}
		if checkDraw() {
			running = false
			fmt.Println("Game drawn")
		}
		turn = !turn
	}
}


func main() {
	runner()
}
